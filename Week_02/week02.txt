

 // N 叉树的前序遍历（亚马逊在半年内面试中考过）
 class Solution {
     public List<Integer> preorder(Node root) {
         List<Integer> result = new ArrayList<>();

         if (root == null) {
             return result;
         }

         Stack<Node> toVisit = new Stack<>();
         toVisit.push(root);

         while (!toVisit.isEmpty()) {
             Node visited = toVisit.pop();
             result.add(visited.val);
             Collections.reverse(visited.children);
             for (Node n : visited.children) {
                 if (n != null) {
                     toVisit.push(n);
                 }
             }
         }
         return result;
     }
 }
 
//二叉树的中序遍历
class Solution {
    public List < Integer > inorderTraversal(TreeNode root) {
        List < Integer > res = new ArrayList < > ();
        helper(root, res);
        return res;
    }

    public void helper(TreeNode root, List < Integer > res) {
        if (root != null) {
            if (root.left != null) {
                helper(root.left, res);
            }
            res.add(root.val);
            if (root.right != null) {
                helper(root.right, res);
            }
        }
    }
}


//N 叉树的后序遍历（亚马逊在半年内面试中考过）
class Solution {
    public List<Integer> postorder(Node root) {
        LinkedList<Node> stack = new LinkedList<>();
        LinkedList<Integer> output = new LinkedList<>();
        if (root == null) {
            return output;
        }
        stack.add(root);
        while (!stack.isEmpty()) {
            Node node = stack.pollLast();
            output.addFirst(node.val);
            for (Node item : node.children) {
                if (item != null) {
                    stack.add(item);
                }
            }
        }
        return output;
    }
}
// N 叉树的层序遍历

class Solution {
    public List<List<Integer>> levelOrder(Node root) {

        List<List<Integer>> res= new ArrayList<>();

        if(root != null){
            List<Node> l = new ArrayList<>();
            l.add(root);
            helper(res,l);
        }

        return res;
    }

    public void helper(List<List<Integer>> res,List<Node> l){

        List<Integer> temp = new ArrayList<>();
        List<Node> tempNode = new ArrayList<>();

        for(Node i:l){
            temp.add(i.val);

            for(Node j:i.children)
                tempNode.add(j);
        }

        if(temp.size() == 0){
            return;
        }else{
            res.add(temp);
            helper(res,tempNode);

        }

    }
}



//全排列（字节跳动在半年内面试常考）

class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> list = new ArrayList<>();
        Arrays.sort(nums);
        backtrack(list, new ArrayList<>(), nums, 0);
        return list;
    }

    private void backtrack(List<List<Integer>> list , List<Integer> tempList, int [] nums, int start){
        list.add(new ArrayList<>(tempList));
        for(int i = start; i < nums.length; i++){
            tempList.add(nums[i]);
            backtrack(list, tempList, nums, i + 1);
            tempList.remove(tempList.size() - 1);
        }
    }
}
// 全排列 II （亚马逊、字节跳动、Facebook 在半年内面试中考过）
       public class Solution {
           public List<List<Integer>> permuteUnique(int[] num) {
               LinkedList<List<Integer>> res = new LinkedList<>();
               res.add(new ArrayList<>());
               for (int i = 0; i < num.length; i++) {
                   Set<String> cache = new HashSet<>();
                   while (res.peekFirst().size() == i) {
                       List<Integer> l = res.removeFirst();
                       for (int j = 0; j <= l.size(); j++) {
                           List<Integer> newL = new ArrayList<>(l.subList(0,j));
                           newL.add(num[i]);
                           newL.addAll(l.subList(j,l.size()));
                           if (cache.add(newL.toString())) res.add(newL);
                       }
                   }
               }
               return res;
           }
       }
